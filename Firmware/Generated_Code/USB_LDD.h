/* ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename    : USB_LDD.h
**     Project     : Frogfoot
**     Processor   : MK60FN1M0VLQ12
**     Component   : USB_LDD
**     Version     : Component 01.307, Driver 01.02, CPU db: 3.00.000
**     Compiler    : GNU C Compiler
**     Date/Time   : 2015-01-24, 15:32, # CodeGen: 0
**     Abstract    :
**         This component implements an low level USB API.
**     Settings    :
**          Component name                                 : USB_LDD
**          USB module (SIE)                               : USBHS
**          Input clock frequency [MHz]                    : 60 MHz
**          Interrupt service/event                        : Enabled
**            Interrupt                                    : INT_USBHS
**            Interrupt priority                           : maximal priority
**          Mode                                           : DEVICE
**            Transceiver type                             : External (ULPI)
**              ULPI interface                             : USBHS_ULPI
**              UTMI+ level                                : UTMI+ 3
**              USB revision                               : USB 2.0
**              Device data rate                           : Dual speed
**              Pin/signal setting                         : 
**                Clock pin                                : Clock input
**                  Pin                                    : ADC3_SE6a/PTA6/ULPI_CLK/FTM0_CH3/I2S1_RXD0/CLKOUTb/TRACE_CLKOUT
**                  Pin signal                             : 
**                  Clock frequency [MHz]                  : 60
**                Direction pin                            : 
**                  Pin                                    : ADC0_SE10/PTA7/ULPI_DIR/FTM0_CH4/I2S1_RX_BCLK/TRACE_D3
**                  Pin signal                             : 
**                Next data pin                            : 
**                  Pin                                    : ADC0_SE11/PTA8/ULPI_NXT/FTM1_CH0/I2S1_RX_FS/FTM1_QD_PHA/TRACE_D2
**                  Pin signal                             : 
**                Stop pin                                 : 
**                  Pin                                    : ADC3_SE5a/PTA9/ULPI_STP/FTM1_CH1/MII0_RXD3/FTM1_QD_PHB/TRACE_D1
**                  Pin signal                             : 
**                Data pins                                : 
**                  Data 0 pin                             : 
**                    Pin                                  : ADC3_SE4a/PTA10/ULPI_DATA0/FTM2_CH0/MII0_RXD2/FTM2_QD_PHA/TRACE_D0
**                    Pin signal                           : 
**                  Data 1 pin                             : 
**                    Pin                                  : ADC3_SE15/PTA11/ULPI_DATA1/FTM2_CH1/MII0_RXCLK/FTM2_QD_PHB
**                    Pin signal                           : 
**                  Data 2 pin                             : 
**                    Pin                                  : CMP3_IN4/PTA24/ULPI_DATA2/MII0_TXD2/FBa_A29
**                    Pin signal                           : 
**                  Data 3 pin                             : 
**                    Pin                                  : CMP3_IN5/PTA25/ULPI_DATA3/MII0_TXCLK/FBa_A28
**                    Pin signal                           : 
**                  Data 4 pin                             : 
**                    Pin                                  : ADC2_SE15/PTA26/ULPI_DATA4/MII0_TXD3/FBa_A27
**                    Pin signal                           : 
**                  Data 5 pin                             : 
**                    Pin                                  : ADC2_SE14/PTA27/ULPI_DATA5/MII0_CRS/FBa_A26
**                    Pin signal                           : 
**                  Data 6 pin                             : 
**                    Pin                                  : ADC2_SE13/PTA28/ULPI_DATA6/MII0_TXER/FBa_A25
**                    Pin signal                           : 
**                  Data 7 pin                             : 
**                    Pin                                  : ADC2_SE12/PTA29/ULPI_DATA7/MII0_COL/FBa_A24
**                    Pin signal                           : 
**            Device mode setting                          : 
**              Tx burst length                            : 1
**              Rx burst length                            : 5
**              EP list                                    : 16
**                EP 0                                     : Enabled
**                  Control transfer                       : Enabled
**                    Maximum packet size                  : 32
**                    Max. queue size                      : 1
**                  Bulk OUT transfer                      : Disabled
**                  Bulk IN transfer                       : Disabled
**                  Interrupt OUT transfer                 : Disabled
**                  Interrupt IN transfer                  : Disabled
**                  Isochronous OUT  transfer              : Disabled
**                  Isochronous IN  transfer               : Disabled
**                EP 1                                     : Enabled
**                  Control transfer                       : Disabled
**                  Bulk OUT transfer                      : Enabled
**                    Max. packet size                     : 64
**                    Max. queue size                      : 1
**                  Bulk IN transfer                       : Enabled
**                    Max. packet size                     : 64
**                    Max. queue size                      : 1
**                  Interrupt OUT transfer                 : Disabled
**                  Interrupt IN transfer                  : Disabled
**                  Isochronous OUT  transfer              : Disabled
**                  Isochronous IN  transfer               : Disabled
**                EP 2                                     : Disabled
**                EP 3                                     : Disabled
**                EP 4                                     : Disabled
**                EP 5                                     : Disabled
**                EP 6                                     : Disabled
**                EP 7                                     : Disabled
**                EP 8                                     : Disabled
**                EP 9                                     : Disabled
**                EP 10                                    : Disabled
**                EP 11                                    : Disabled
**                EP 12                                    : Disabled
**                EP 13                                    : Disabled
**                EP 14                                    : Disabled
**                EP 15                                    : Disabled
**            Initialization                               : 
**              Enabled in init. code                      : no
**              Auto initialization                        : no
**              Event mask                                 : 
**                OnDeviceReset                            : Disabled
**                OnDeviceSpeedDetect                      : Enabled
**                OnDeviceSuspend                          : Disabled
**                OnDeviceResume                           : Disabled
**                OnDeviceSetupPacket                      : Enabled
**                OnDeviceSof                              : Disabled
**                OnDeviceError                            : Disabled
**                OnDevice1msTimer                         : Disabled
**                OnSignalChange                           : Enabled
**          CPU clock/configuration selection              : 
**            Clock configuration 0                        : This component enabled
**            Clock configuration 1                        : This component disabled
**            Clock configuration 2                        : This component disabled
**            Clock configuration 3                        : This component disabled
**            Clock configuration 4                        : This component disabled
**            Clock configuration 5                        : This component disabled
**            Clock configuration 6                        : This component disabled
**            Clock configuration 7                        : This component disabled
**     Contents    :
**         Init                  - LDD_TDeviceData * USB_LDD_Init(LDD_TUserData *UserDataPtr);
**         Enable                - LDD_TError USB_LDD_Enable(LDD_TDeviceData *DeviceDataPtr);
**         Disable               - LDD_TError USB_LDD_Disable(LDD_TDeviceData *DeviceDataPtr);
**         DeviceGetUsbStatus    - LDD_TError USB_LDD_DeviceGetUsbStatus(LDD_TDeviceData *DeviceDataPtr,...
**         DeviceSetUsbStatus    - LDD_TError USB_LDD_DeviceSetUsbStatus(LDD_TDeviceData *DeviceDataPtr,...
**         DeviceSetAddress      - void USB_LDD_DeviceSetAddress(LDD_TDeviceData *DeviceDataPtr, uint8_t Address);
**         DeviceInitEndpoint    - LDD_TError USB_LDD_DeviceInitEndpoint(LDD_TDeviceData *DeviceDataPtr,...
**         DeviceDeinitEndpoint  - LDD_TError USB_LDD_DeviceDeinitEndpoint(LDD_TDeviceData *DeviceDataPtr,...
**         DeviceStallEndpoint   - void USB_LDD_DeviceStallEndpoint(LDD_TDeviceData *DeviceDataPtr, uint8_t...
**         DeviceUnstallEndpoint - void USB_LDD_DeviceUnstallEndpoint(LDD_TDeviceData *DeviceDataPtr, uint8_t...
**         DeviceReadSetupData   - void USB_LDD_DeviceReadSetupData(LDD_TDeviceData *DeviceDataPtr, uint8_t...
**         DeviceSendData        - LDD_TError USB_LDD_DeviceSendData(LDD_TDeviceData *DeviceDataPtr,...
**         DeviceRecvData        - LDD_TError USB_LDD_DeviceRecvData(LDD_TDeviceData *DeviceDataPtr,...
**         DeviceCancelTransfer  - LDD_TError USB_LDD_DeviceCancelTransfer(LDD_TDeviceData *DeviceDataPtr,...
**
**     Copyright : 1997 - 2014 Freescale Semiconductor, Inc. 
**     All Rights Reserved.
**     
**     Redistribution and use in source and binary forms, with or without modification,
**     are permitted provided that the following conditions are met:
**     
**     o Redistributions of source code must retain the above copyright notice, this list
**       of conditions and the following disclaimer.
**     
**     o Redistributions in binary form must reproduce the above copyright notice, this
**       list of conditions and the following disclaimer in the documentation and/or
**       other materials provided with the distribution.
**     
**     o Neither the name of Freescale Semiconductor, Inc. nor the names of its
**       contributors may be used to endorse or promote products derived from this
**       software without specific prior written permission.
**     
**     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
**     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
**     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
**     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
**     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
**     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
**     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
**     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
**     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**     
**     http: www.freescale.com
**     mail: support@freescale.com
** ###################################################################*/
/*!
** @file USB_LDD.h
** @version 01.02
** @brief
**         This component implements an low level USB API.
*/         
/*!
**  @addtogroup USB_LDD_module USB_LDD module documentation
**  @{
*/         

#ifndef __USB_LDD_H
#define __USB_LDD_H

/* MODULE USB_LDD. */

/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited components */

#include "Cpu.h"

#ifdef __cplusplus
extern "C" {
#endif 


/*! Peripheral base address of a device allocated by the component. This constant can be used directly in PDD macros. */
#define USB_LDD_PRPH_BASE_ADDRESS  0x40034000U
  
/* Methods configuration constants - generated for all enabled component's methods */
#define USB_LDD_Init_METHOD_ENABLED    /*!< Init method of the component USB_LDD is enabled (generated) */
#define USB_LDD_Enable_METHOD_ENABLED  /*!< Enable method of the component USB_LDD is enabled (generated) */
#define USB_LDD_Disable_METHOD_ENABLED /*!< Disable method of the component USB_LDD is enabled (generated) */
#define USB_LDD_DeviceGetUsbStatus_METHOD_ENABLED /*!< DeviceGetUsbStatus method of the component USB_LDD is enabled (generated) */
#define USB_LDD_DeviceSetUsbStatus_METHOD_ENABLED /*!< DeviceSetUsbStatus method of the component USB_LDD is enabled (generated) */
#define USB_LDD_DeviceSetAddress_METHOD_ENABLED /*!< DeviceSetAddress method of the component USB_LDD is enabled (generated) */
#define USB_LDD_DeviceInitEndpoint_METHOD_ENABLED /*!< DeviceInitEndpoint method of the component USB_LDD is enabled (generated) */
#define USB_LDD_DeviceDeinitEndpoint_METHOD_ENABLED /*!< DeviceDeinitEndpoint method of the component USB_LDD is enabled (generated) */
#define USB_LDD_DeviceStallEndpoint_METHOD_ENABLED /*!< DeviceStallEndpoint method of the component USB_LDD is enabled (generated) */
#define USB_LDD_DeviceUnstallEndpoint_METHOD_ENABLED /*!< DeviceUnstallEndpoint method of the component USB_LDD is enabled (generated) */
#define USB_LDD_DeviceReadSetupData_METHOD_ENABLED /*!< DeviceReadSetupData method of the component USB_LDD is enabled (generated) */
#define USB_LDD_DeviceSendData_METHOD_ENABLED /*!< DeviceSendData method of the component USB_LDD is enabled (generated) */
#define USB_LDD_DeviceRecvData_METHOD_ENABLED /*!< DeviceRecvData method of the component USB_LDD is enabled (generated) */
#define USB_LDD_DeviceCancelTransfer_METHOD_ENABLED /*!< DeviceCancelTransfer method of the component USB_LDD is enabled (generated) */

/* Events configuration constants - generated for all enabled component's events */
#define USB_LDD_OnDeviceSpeedDetect_EVENT_ENABLED /*!< OnDeviceSpeedDetect event of the component USB_LDD is enabled (generated) */
#define USB_LDD_OnDeviceSetupPacket_EVENT_ENABLED /*!< OnDeviceSetupPacket event of the component USB_LDD is enabled (generated) */

/* Driver mode */
#define USB_LDD_MODE_DEVICE

#define USB_LDD_USB_SYSTEM_ERROR      0x0192U
#define USB_LDD_USB_BUS_RESET_ERROR   0x0193U

/*
** ===================================================================
**     Method      :  USB_LDD_Init (component USB_LDD)
*/
/*!
**     @brief
**         Initializes USB device. Allocates memory for the device data
**         structure, interrupts, pins, etc. This method doesn't enable
**         device pull-up. Use Enable() method to enable device pull-up.
**     @param
**         UserDataPtr     - Pointer to the user or
**                           RTOS specific data. This pointer will be
**                           passed as an event or callback parameter.
**     @return
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData * USB_LDD_Init(LDD_TUserData *UserDataPtr);

/*
** ===================================================================
**     Method      :  USB_LDD_Enable (component USB_LDD)
*/
/*!
**     @brief
**         Enables the USB device (PHY, SIE). Enables device's DP(DM)
**         pull-up.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @return
**                         - 
*/
/* ===================================================================*/
LDD_TError USB_LDD_Enable(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  USB_LDD_Disable (component USB_LDD)
*/
/*!
**     @brief
**         Disabled device's DP(DM) pull-up. Disables PHY, etc.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @return
**                         - 
*/
/* ===================================================================*/
LDD_TError USB_LDD_Disable(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  USB_LDD_DeviceGetUsbStatus (component USB_LDD)
*/
/*!
**     @brief
**         Returns the status of the object (e.g. endpoint). This
**         method is intended to be used in the standard USB
**         'GetStatus' request handler.
**         The object is described by the command (CmdStatusPtr
**         parameter) and by the id (Id parameter). 
**         The supported commands are:
**         [1) LDD_USB_CMD_GET_EP_STATUS] - Fills the memory addressed
**         by the CmdStatusPtr parameter by the current endpoint XXX
**         status (where XXX = Id parameter value) .
**         Format of the returned status is defined in the USB
**         specification 2.0, figure 9.6.
**         The LDD_USB_CMD_EP_STATUS_HALT_MASK constant can be used to
**         get endpoint status from the returned value.
**         If the device is not in enabled <state> the method returns
**         ERR_USB_DEVICE_XXX error code.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         Id              - Id. (E.g endpoint address for endpoint
**                           status, ...)
**                           The Id parameter value has the same format
**                           as wIndex parameter in the setup data
**                           packet - see USB specification.
**     @param
**         CmdStatusPtr    - Pointer to the uint16_t
**                           in/out variable. This variable must
**                           contains requested command before the
**                           method is called and contains requested
**                           status after the method returns.
**                           The supported command are:
**                           LDD_USB_CMD_GET_EP_STATUS
**     @return
**                         - Return value:
**                           ERR_OK - OK
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration.
**                           ERR_DISABLED - Device is disabled.
**                           ERR_PARAM_COMMAND - Unknown command.
**                           ERR_PARAM_ADDRESS - No such object (e.g.
**                           endpoint doesn't exists or is not enabled
**                           by the host). Note: The 'Id' parameter
**                           check is always enabled in order to
**                           simplify implementation of the standard USB
**                           GetStatus request handler.
**                           ERR_FAILED - Command not supported for
**                           current object setting (e.g. STALL feature
**                           is not supported for isochronous endpoints).
**                           ERR_USB_DEVICE_XXX where XXX is name of the
**                           state. - The command cannot be accomplished
**                           in XXX <device state>.
*/
/* ===================================================================*/
LDD_TError USB_LDD_DeviceGetUsbStatus(LDD_TDeviceData *DeviceDataPtr, uint16_t Id, uint16_t *CmdStatusPtr);

/*
** ===================================================================
**     Method      :  USB_LDD_DeviceSetUsbStatus (component USB_LDD)
*/
/*!
**     @brief
**         Sets the status(feature) of the object (e.g. endpoint). This
**         method is intended to be used in the standard USB
**         ClearFeature/SetFeature request handler.
**         The object is described by the command (Cmd parameter) and
**         by the id (Id parameter). 
**         The supported commands are:
**         [LDD_USB_CMD_SET_EP_HALT_FATURE] - Sets HALT feature for
**         endpoint XXX (where XXX = Id parameter value).
**         [LDD_USB_CMD_CLR_EP_HALT_FATURE] - Clears HALT feature for
**         endpoint XXX (where XXX = Id parameter value).
**         If the device is not in enabled <state> the method returns
**         ERR_USB_DEVICE_XXX error code.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         Id              - Id. (E.g endpoint address for endpoint
**                           status, ...)
**                           The Id parameter value has the same format
**                           as wIndex parameter in the setup data
**                           packet - see USB specification.
**     @param
**         Cmd             - Command. Supported commands are:
**                           LDD_USB_CMD_SET_EP_HALT_FATURE
**                           LDD_USB_CMD_CLR_EP_HALT_FATURE
**     @return
**                         - Return value:
**                           ERR_OK - OK
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration.
**                           ERR_DISABLED - Device is disabled.
**                           ERR_PARAM_COMMAND - Unknown command.
**                           ERR_PARAM_ADDRESS - No such object (e.g.
**                           endpoint doesn't exists or is not enabled
**                           by the host). Note: The 'Id' parameter
**                           check is always enabled in order to
**                           simplify implementation of the standard USB
**                           GetStatus request handler.
**                           ERR_FAILED - Command not supported for
**                           current object setting (e.g. STALL feature
**                           is not supported for isochronous endpoints).
**                           ERR_USB_DEVICE_XXX where XXX is name of the
**                           state. - The command cannot be accomplished
**                           in XXX <device state>.
*/
/* ===================================================================*/
LDD_TError USB_LDD_DeviceSetUsbStatus(LDD_TDeviceData *DeviceDataPtr, uint16_t Id, uint16_t Cmd);

/*
** ===================================================================
**     Method      :  USB_LDD_DeviceSetAddress (component USB_LDD)
*/
/*!
**     @brief
**         Sets new device address. Address must be in range 0-127 but
**         no check is performed.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         Address         - New device address.
*/
/* ===================================================================*/
void USB_LDD_DeviceSetAddress(LDD_TDeviceData *DeviceDataPtr, uint8_t Address);

/*
** ===================================================================
**     Method      :  USB_LDD_DeviceInitEndpoint (component USB_LDD)
*/
/*!
**     @brief
**         Initializes endpoint according to the values in the
**         <standard Endpoint descriptor> and in the flags parameter.
**         As soon as the ERR_OK is returned the endpoint can be used
**         to transmit data. To initialize endpoint 0 you can create
**         Endpoint descriptor for EP0 or you can use the <standard
**         Device descriptor>.
**         If the device is not in enabled <state> the method returns
**         ERR_USB_DEVICE_XXX error code.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         EpDescriptorPtr - Pointer to
**                           standard Endpoint descriptor structure
**                           pointer. To initialize EP0 you can use
**                           pointer to the standard Device descriptor
**                           structure.
**     @param
**         Flags           - Additional EP properties. 
**                           For Bulk/Interrupt transfer types:
**                           0 = no ZLT,  1 = ZLT
**     @return
**                         - Return value:
**                           ERR_OK - OK
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration.
**                           ERR_DISABLED - Device is disabled.
**                           ERR_PARAM_ADDRESS - Endpoint of requested
**                           address and direction is not supported by
**                           the HW.
**                           ERR_PARAM_TYPE - Requested transfer is not
**                           supported by the HW for given address and
**                           direction.
**                           ERR_PARAM_SIZE - Requested max. packet size
**                           is not supported by the HW.
**                           ERR_USB_DEVICE_XXX where XXX is name of the
**                           state. - Device is not in enabled <state>.
*/
/* ===================================================================*/
LDD_TError USB_LDD_DeviceInitEndpoint(LDD_TDeviceData *DeviceDataPtr, LDD_USB_TEpDescriptor *EpDescriptorPtr, uint8_t Flags);

/*
** ===================================================================
**     Method      :  USB_LDD_DeviceDeinitEndpoint (component USB_LDD)
*/
/*!
**     @brief
**         Deinitializes EP and disables it in the HW. For control EP
**         both directions are deinitialized. All pending transfers are
**         aborted and callback functions are called, if enabled.
**         If the device is not in enabled <state> the method returns
**         ERR_USB_DEVICE_XXX error code.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         EpNum           - Endpoint number.
**     @param
**         EpDir           - Endpoint direction, 0 = OUT(Rx), 1 for
**                           IN(Tx).
**     @return
**                         - Return value:
**                           ERR_OK - OK
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration.
**                           ERR_DISABLED - Device is disabled.
**                           ERR_PARAM_ADDRESS - Endpoint of requested
**                           address and direction is not supported by
**                           the HW.
**                           ERR_USB_DEVICE_XXX where XXX is name of the
**                           state. - Device is not in enabled <state>.
*/
/* ===================================================================*/
LDD_TError USB_LDD_DeviceDeinitEndpoint(LDD_TDeviceData *DeviceDataPtr, uint8_t EpNum, uint8_t EpDir);

/*
** ===================================================================
**     Method      :  USB_LDD_DeviceStallEndpoint (component USB_LDD)
*/
/*!
**     @brief
**         Sets STALL feature for endpoint.
**         Note: No parameters and endpoint state are checked. The
**         <DeviceSetUsbStatus()> method provides same functionality
**         with state and parameter checking.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         EpNum           - Endpoint number.
**     @param
**         EpDir           - Endpoint direction, 0 = OUT(Rx), 1 for
**                           IN(Tx).
*/
/* ===================================================================*/
void USB_LDD_DeviceStallEndpoint(LDD_TDeviceData *DeviceDataPtr, uint8_t EpNum, uint8_t EpDir);

/*
** ===================================================================
**     Method      :  USB_LDD_DeviceUnstallEndpoint (component USB_LDD)
*/
/*!
**     @brief
**         Clears STALL feature for endpoint.
**         Note: No parameters and endpoint state are checked. The
**         <DeviceSetUsbStatus()> method provides same functionality
**         with state and parameter checking.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         EpNum           - Endpoint number.
**     @param
**         EpDir           - Endpoint direction, 0 = OUT(Rx), 1 for
**                           IN(Tx).
*/
/* ===================================================================*/
void USB_LDD_DeviceUnstallEndpoint(LDD_TDeviceData *DeviceDataPtr, uint8_t EpNum, uint8_t EpDir);

/*
** ===================================================================
**     Method      :  USB_LDD_DeviceReadSetupData (component USB_LDD)
*/
/*!
**     @brief
**         Fills the given buffer with last received setup data packet
**         for given EP.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         EpNum           - Endpoint number.
**     @param
**         SDPPtr          - Address of the buffer for setup data.
*/
/* ===================================================================*/
void USB_LDD_DeviceReadSetupData(LDD_TDeviceData *DeviceDataPtr, uint8_t EpNum, LDD_USB_TSDP *SDPPtr);

/*
** ===================================================================
**     Method      :  USB_LDD_DeviceSendData (component USB_LDD)
*/
/*!
**     @brief
**         This method prepares data to be sent to the HOST (transfer
**         request). The transfer request is queued into the internal
**         queue of requests for given endpoint. Some devices have HW
**         queues. On other devices the queue can be emulated by the SW
**         or no queue is implemented (property Max. queue size = 1 and
**         cannot be modified). Size of queue can be defined for each
**         endpoint at the design time. As soon as the host sends IN
**         token data from the request on the queue head are sent to
**         the HOST. This process is repeated until all data are
**         transferred or transfer is cancelled. If the transfer is
**         done the request is removed from the queue and next request
**         becomes ready for transmission, if queue not empty.
**         Each transfer is described by the <transfer descriptor (TD)>
**         structure.
**         The first item of the TD is the <Head> structure. The Head
**         structure item is required and contains these items:
**         _/[EpNum]/_ - endpoint number.
**         _/[BufferPtr]/_ - buffer address.
**         _/[BufferSize]/_ - buffer size.
**         _/[Flags]/_ - flags:
**         _/LDD_USB_DEVICE_TRANSFER_FLAG_ZLT/_ - this flag can be used
**         to force zero-length termination(ZLT) of the transfer.
**         _/LDD_USB_DEVICE_TRANSFER_FLAG_EXT_PARAM/_ - see below.
**         The following items of the TD are optional:
**         _/[TransmittedDataSize]/_ - this item is set by the driver
**         and contains actual number of transmitted data.
**         _/[CallbackFnPtr]/_ - pointer to the callback function
**         called (if not NULL) after the transfer is done.
**         _/[ParamPtr]/_ - parameter passed to the callback function.
**         The optional items can be used to track the status of the
**         transfer request and are used(accessed) by the driver only
**         if <LDD_USB_DEVICE_TRANSFER_FLAG_EXT_PARAM> flag is set to
**         '1' in the Head.Flags item. In this case the TD must be
**         accessible from the ISR and may be freed only if the
**         transfer is done (TransfereState item must be lower then
**         LDD_USB_TRANSFER_QUEUED). Pending transfer requests can be
**         cancelled by the <DeviceCancelTransfer()> method.
**         Transfer is done if all data are sent. If data size = max.
**         packet size and ZLT is enabled the zero length packet is
**         send as the last packet of the transfer.
**         [Note:]For control transfer the transmitted data size
**         truncated (if necessary) by the driver to the size requested
**         by the host (wLength item of setup data packet) and the ZLT
**         is added if needed. Note: On some MCUs (e.g. Kinetis) must
**         be the address of the data buffer 4 bytes aligned.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         TransferDescriptorPtr -
**                           Pointer to the <transfer descriptor (TD)>
**     @return
**                         - Return value:
**                           ERR_OK - OK
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration.
**                           ERR_DISABLED - The component is disabled.
**                           ERR_USB_DEVICE_XXX where XXX is name of the
**                           state - Device is not in enabled <state>.
**                           ERR_PARAM_ADDRESS - Endpoint of requested
**                           address and direction is not supported by
**                           the driver.
**                           ERR_NOTAVAIL - Endpoint is not <initialized>.
**                           ERR_FAILED - Endpoint is STALLed.
**                           ERR_QFULL - Endpoint transfer queue is full.
*/
/* ===================================================================*/
LDD_TError USB_LDD_DeviceSendData(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Device_TTD *TransferDescriptorPtr);

/*
** ===================================================================
**     Method      :  USB_LDD_DeviceRecvData (component USB_LDD)
*/
/*!
**     @brief
**         This method prepares buffer for data sent by the HOST
**         (transfer request). The transfer request is queued into the
**         internal queue of requests for given endpoint. Some devices
**         have HW queues. On other devices the queue can be emulated
**         by the SW or no queue is implemented (property Max. queue
**         size = 1 and cannot be modified). Size of queue can be
**         defined for each endpoint at the design time. Data from the
**         HOST are stored into the provided buffer. If the transfer is
**         done the request is removed from the queue and next request
**         becomes ready for transmission, if queue not empty.
**         Each transfer is described by the <transfer descriptor (TD)>
**         structure.
**         The first item of the TD is the <Head> structure. The Head
**         structure item is required and contains these items:
**         _/[EpNum]/_ - endpoint number.
**         _/[BufferPtr]/_ - buffer address.
**         _/[BufferSize]/_ - buffer size.
**         _/[Flags]/_ - flags:
**         _/LDD_USB_DEVICE_TRANSFER_FLAG_EXT_PARAM/_ - see below.
**         The following items of the TD are optional:
**         _/[TransmittedDataSize]/_ - this item is set by the driver
**         and contains actual number of transmitted data.
**         _/[CallbackFnPtr]/_ - pointer to the callback function
**         called (if not NULL) after the transfer is done.
**         _/[ParamPtr]/_ - parameter passed to the callback function.
**         The optional items can be used to track the status of the
**         transfer request and are used(accessed) by the driver only
**         if <LDD_USB_DEVICE_TRANSFER_FLAG_EXT_PARAM> flag is set to
**         '1' in the Head.Flags item. In this case the TD must be
**         accessible from the ISR and may be freed only if the
**         transfer is done (TransfereState item must be lower then
**         LDD_USB_TRANSFER_QUEUED). Pending transfer requests can be
**         cancelled by the <DeviceCancelTransfer()> method.
**         Transfer is done if all requested data are received or
**         short(zero length) packet is received. Note: On some MCUs (e.
**         g. Kinetis) must be the address of the data buffer 4 bytes
**         aligned.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         TransferDescriptorPtr -
**                           Pointer to the <transfer descriptor (TD)>
**     @return
**                         - Return value:
**                           ERR_OK - OK
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration.
**                           ERR_DISABLED - The component is disabled.
**                           ERR_USB_DEVICE_XXX where XXX is name of the
**                           state - Device is not in enabled <state>.
**                           ERR_PARAM_ADDRESS - Endpoint of requested
**                           address and direction is not supported by
**                           the driver.
**                           ERR_NOTAVAIL - Endpoint is not <initialized>.
**                           ERR_FAILED - Endpoint is STALLed.
**                           ERR_QFULL - Endpoint transfer queue is full.
*/
/* ===================================================================*/
LDD_TError USB_LDD_DeviceRecvData(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Device_TTD *TransferDescriptorPtr);

/*
** ===================================================================
**     Method      :  USB_LDD_DeviceCancelTransfer (component USB_LDD)
*/
/*!
**     @brief
**         Cancels all pending transfers in the given EP queue.
**         Transfer status is updated and callback function is called
**         for each cancelled transfer request if enabled in the
**         <SendData> or <RecvData> methods.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         EpNum           - Endpoint number.
**     @param
**         EpDir           - Endpoint direction, 0 = OUT(Rx), 1 for
**                           IN(Tx).
**     @return
**                         - Return value:
**                           ERR_OK - OK
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration.
**                           ERR_DISABLED - The component is disabled.
**                           ERR_USB_DEVICE_XXX where XXX is name of the
**                           state - Device is not in enabled <state>.
**                           ERR_PARAM_ADDRESS - Endpoint of requested
**                           address and direction is not supported by
**                           the driver.
*/
/* ===================================================================*/
LDD_TError USB_LDD_DeviceCancelTransfer(LDD_TDeviceData *DeviceDataPtr, uint8_t EpNum, uint8_t EpDir);

/*
** ===================================================================
**     Method      :  USB_LDD_USB_Interrupt (component USB_LDD)
**
**     Description :
**         USB interrupt handler
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
/* {Default RTOS Adapter} ISR function prototype */
PE_ISR(USB_LDD_USB_Interrupt);

/* END USB_LDD. */

#ifdef __cplusplus
}  /* extern "C" */
#endif 

#endif
/* ifndef __USB_LDD_H */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.4 [05.11]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
