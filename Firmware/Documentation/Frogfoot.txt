=============================================================================
List of generated methods in project: main

THIS TEXT DESCRIPTION IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
=============================================================================

Module "FTM2"      (component Init_FTM_VAR0)
   - FTM2_Init -This method initializes registers of the FTM module according to the Peripheral Initialization settings. Call 
                this method in user code to initialize the module. By default, the method is called by PE automatically; see 
                "Call Init method" property of the component for more details.

Module "DA1"       (component DAC)
   - DA1_SetValue -This method sets values of all channels.

Module "AS1"       (component Serial_LDD)
   - AS1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.
   - AS1_SendBlock -Sends a block of characters. The method returns ERR_BUSY when the previous block transmission is not 
                completed. Method <CancelBlockTransmission> can be used to cancel a transmit operation. This method is 
                available only if the transmitter property is enabled. This method finishes immediately after calling it - it 
                doesn't wait the end of data transmission. Use event <OnBlockSent> to check the end of data transmission or 
                method GetSentDataNum to check the state of sending.
   - AS1_ReceiveBlock -Specifies the number of data to receive. The method returns ERR_BUSY until the specified number of 
                characters is received. Method <CancelBlockReception> can be used to cancel a running receive operation. If a 
                receive operation is not in progress (the method was not called or a previous operation has already finished) 
                all received characters will be lost without any notification. To prevent the loss of data call the method 
                immediately after the last receive operation has finished (e.g. from the <OnBlockReceived> event). This method 
                finishes immediately after calling it - it doesn't wait the end of data reception. Use event <OnBlockReceived> 
                to check the end of data reception or method GetReceivedDataNum to check the state of receiving.

Module "CS1"       (component CriticalSection)
   - CS1_CriticalVariable -Defines a variable if necessary. This is a macro.
   - CS1_EnterCritical -Enters a critical section
   - CS1_ExitCritical -Exits a critical section

Module "USB_LDD"   (component USB_LDD)
   - USB_LDD_Init -Initializes USB device. Allocates memory for the device data structure, interrupts, pins, etc. This method 
                doesn't enable device pull-up. Use Enable() method to enable device pull-up.
   - USB_LDD_Enable -Enables the USB device (PHY, SIE). Enables device's DP(DM) pull-up.
   - USB_LDD_Disable -Disabled device's DP(DM) pull-up. Disables PHY, etc.
   - USB_LDD_DeviceGetUsbStatus -Returns the status of the object (e.g. endpoint). This method is intended to be used in the 
                standard USB 'GetStatus' request handler.  The object is described by the command (CmdStatusPtr parameter) and 
                by the id (Id parameter).   The supported commands are:  [1) LDD_USB_CMD_GET_EP_STATUS] - Fills the memory 
                addressed by the CmdStatusPtr parameter by the current endpoint XXX status (where XXX = Id parameter value) .  
                Format of the returned status is defined in the USB specification 2.0, figure 9.6.  The 
                LDD_USB_CMD_EP_STATUS_HALT_MASK constant can be used to get endpoint status from the returned value.  If the 
                device is not in enabled <state> the method returns ERR_USB_DEVICE_XXX error code.
   - USB_LDD_DeviceSetUsbStatus -Sets the status(feature) of the object (e.g. endpoint). This method is intended to be used in 
                the standard USB ClearFeature/SetFeature request handler.  The object is described by the command (Cmd 
                parameter) and by the id (Id parameter).   The supported commands are:  [LDD_USB_CMD_SET_EP_HALT_FATURE] - Sets 
                HALT feature for endpoint XXX (where XXX = Id parameter value).  [LDD_USB_CMD_CLR_EP_HALT_FATURE] - Clears HALT 
                feature for endpoint XXX (where XXX = Id parameter value).  If the device is not in enabled <state> the method 
                returns ERR_USB_DEVICE_XXX error code.
   - USB_LDD_DeviceSetAddress -Sets new device address. Address must be in range 0-127 but no check is performed.
   - USB_LDD_DeviceInitEndpoint -Initializes endpoint according to the values in the <standard Endpoint descriptor> and in the 
                flags parameter. As soon as the ERR_OK is returned the endpoint can be used to transmit data. To initialize 
                endpoint 0 you can create Endpoint descriptor for EP0 or you can use the <standard Device descriptor>.  If the 
                device is not in enabled <state> the method returns ERR_USB_DEVICE_XXX error code.
   - USB_LDD_DeviceDeinitEndpoint -Deinitializes EP and disables it in the HW. For control EP both directions are deinitialized.
                All pending transfers are aborted and callback functions are called, if enabled.  If the device is not in 
                enabled <state> the method returns ERR_USB_DEVICE_XXX error code.
   - USB_LDD_DeviceStallEndpoint -Sets STALL feature for endpoint.  Note: No parameters and endpoint state are checked. The 
                <DeviceSetUsbStatus()> method provides same functionality with state and parameter checking.
   - USB_LDD_DeviceUnstallEndpoint -Clears STALL feature for endpoint.  Note: No parameters and endpoint state are checked. The 
                <DeviceSetUsbStatus()> method provides same functionality with state and parameter checking.
   - USB_LDD_DeviceReadSetupData -Fills the given buffer with last received setup data packet for given EP.
   - USB_LDD_DeviceSendData -This method prepares data to be sent to the HOST (transfer request). The transfer request is 
                queued into the internal queue of requests for given endpoint. Some devices have HW queues. On other devices 
                the queue can be emulated by the SW or no queue is implemented (property Max. queue size = 1 and cannot be 
                modified). Size of queue can be defined for each endpoint at the design time. As soon as the host sends IN 
                token data from the request on the queue head are sent to the HOST. This process is repeated until all data are 
                transferred or transfer is cancelled. If the transfer is done the request is removed from the queue and next 
                request becomes ready for transmission, if queue not empty.  Each transfer is described by the <transfer 
                descriptor (TD)> structure.  The first item of the TD is the <Head> structure. The Head structure item is 
                required and contains these items:  _/[EpNum]/_ - endpoint number.  _/[BufferPtr]/_ - buffer address.  
                _/[BufferSize]/_ - buffer size.  _/[Flags]/_ - flags:  _/LDD_USB_DEVICE_TRANSFER_FLAG_ZLT/_ - this flag can be 
                used to force zero-length termination(ZLT) of the transfer.  _/LDD_USB_DEVICE_TRANSFER_FLAG_EXT_PARAM/_ - see 
                below.  The following items of the TD are optional:  _/[TransmittedDataSize]/_ - this item is set by the driver 
                and contains actual number of transmitted data.  _/[CallbackFnPtr]/_ - pointer to the callback function called 
                (if not NULL) after the transfer is done.  _/[ParamPtr]/_ - parameter passed to the callback function.  The 
                optional items can be used to track the status of the transfer request and are used(accessed) by the driver 
                only if <LDD_USB_DEVICE_TRANSFER_FLAG_EXT_PARAM> flag is set to '1' in the Head.Flags item. In this case the TD 
                must be accessible from the ISR and may be freed only if the transfer is done (TransfereState item must be 
                lower then LDD_USB_TRANSFER_QUEUED). Pending transfer requests can be cancelled by the <DeviceCancelTransfer()> 
                method.  Transfer is done if all data are sent. If data size = max. packet size and ZLT is enabled the zero 
                length packet is send as the last packet of the transfer.  [Note:]For control transfer the transmitted data 
                size truncated (if necessary) by the driver to the size requested by the host (wLength item of setup data 
                packet) and the ZLT is added if needed. Note: On some MCUs (e.g. Kinetis) must be the address of the data 
                buffer 4 bytes aligned.
   - USB_LDD_DeviceRecvData -This method prepares buffer for data sent by the HOST (transfer request). The transfer request is 
                queued into the internal queue of requests for given endpoint. Some devices have HW queues. On other devices 
                the queue can be emulated by the SW or no queue is implemented (property Max. queue size = 1 and cannot be 
                modified). Size of queue can be defined for each endpoint at the design time. Data from the HOST are stored 
                into the provided buffer. If the transfer is done the request is removed from the queue and next request 
                becomes ready for transmission, if queue not empty.  Each transfer is described by the <transfer descriptor 
                (TD)> structure.  The first item of the TD is the <Head> structure. The Head structure item is required and 
                contains these items:  _/[EpNum]/_ - endpoint number.  _/[BufferPtr]/_ - buffer address.  _/[BufferSize]/_ - 
                buffer size.  _/[Flags]/_ - flags:  _/LDD_USB_DEVICE_TRANSFER_FLAG_EXT_PARAM/_ - see below.  The following 
                items of the TD are optional:  _/[TransmittedDataSize]/_ - this item is set by the driver and contains actual 
                number of transmitted data.  _/[CallbackFnPtr]/_ - pointer to the callback function called (if not NULL) after 
                the transfer is done.  _/[ParamPtr]/_ - parameter passed to the callback function.  The optional items can be 
                used to track the status of the transfer request and are used(accessed) by the driver only if 
                <LDD_USB_DEVICE_TRANSFER_FLAG_EXT_PARAM> flag is set to '1' in the Head.Flags item. In this case the TD must be 
                accessible from the ISR and may be freed only if the transfer is done (TransfereState item must be lower then 
                LDD_USB_TRANSFER_QUEUED). Pending transfer requests can be cancelled by the <DeviceCancelTransfer()> method.  
                Transfer is done if all requested data are received or short(zero length) packet is received. Note: On some 
                MCUs (e.g. Kinetis) must be the address of the data buffer 4 bytes aligned.
   - USB_LDD_DeviceCancelTransfer -Cancels all pending transfers in the given EP queue. Transfer status is updated and callback 
                function is called for each cancelled transfer request if enabled in the <SendData> or <RecvData> methods.

Module "Cpu"       (component MK60FN1M0LQ15)

===================================================================================
